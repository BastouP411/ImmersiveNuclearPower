buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.wynprice.cursemaven"

version = buildVersionString()
group = 'fr.bastoup.immersivenuclearpower' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'immersivenuclearpower'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources"
            ]
        }
    }
}

def version_replaces = [
        'version': project.version,
        'mc_version': version_minecraft,
        'forge_version': version_forge
]

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand version_replaces
    }
}

// When using "Run using IntelliJ" (the only option with well-working hotswapping) the used "resources" directory is
// different from the one used by gradle/the processResources task
task copyResourcesForIntelliJ(type: Copy) {
    from processResources.destinationDir
    into "$projectDir/out/production/resources"
}

processResources.finalizedBy copyResourcesForIntelliJ


println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                immersivenuclearpower {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                immersivenuclearpower {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'immersivenuclearpower', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                immersivenuclearpower {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'jared maven'
        url 'http://blamejared.com/maven'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.0'

    compile fg.deobf("curse.maven:immersive-engineering:3102280")
    runtime fg.deobf("curse.maven:jei:3109181")
    runtime fg.deobf("curse.maven:mekanism:3100510")
    runtime fg.deobf("curse.maven:mekanism-additions:3100514")
    runtime fg.deobf("curse.maven:mekanism-generators:3100512")
    runtime fg.deobf("curse.maven:mekanism-tools:3100513")

}

String buildVersionString() {
    String ie_output_version = "${version_inp}-${version_buildnumber}"

    return "${version_minecraft}-${ie_output_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "immersivenuclearpower",
            "Specification-Vendor": "BastouP",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"BastouP",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
